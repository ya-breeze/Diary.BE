// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Diary - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"net/http"
	"strings"
)

// AssetsAPIController binds http requests to an api service and writes the service results to the http response
type AssetsAPIController struct {
	service      AssetsAPIServicer
	errorHandler ErrorHandler
}

// AssetsAPIOption for how the controller is set up.
type AssetsAPIOption func(*AssetsAPIController)

// WithAssetsAPIErrorHandler inject ErrorHandler into controller
func WithAssetsAPIErrorHandler(h ErrorHandler) AssetsAPIOption {
	return func(c *AssetsAPIController) {
		c.errorHandler = h
	}
}

// NewAssetsAPIController creates a default api controller
func NewAssetsAPIController(s AssetsAPIServicer, opts ...AssetsAPIOption) *AssetsAPIController {
	controller := &AssetsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AssetsAPIController
func (c *AssetsAPIController) Routes() Routes {
	return Routes{
		"GetAsset": Route{
			strings.ToUpper("Get"),
			"/v1/assets",
			c.GetAsset,
		},
	}
}

// GetAsset - return asset by path
func (c *AssetsAPIController) GetAsset(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	result, err := c.service.GetAsset(r.Context(), pathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
