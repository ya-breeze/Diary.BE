// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Diary - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"net/http"
	"strings"
)

// SyncAPIController binds http requests to an api service and writes the service results to the http response
type SyncAPIController struct {
	service      SyncAPIServicer
	errorHandler ErrorHandler
}

// SyncAPIOption for how the controller is set up.
type SyncAPIOption func(*SyncAPIController)

// WithSyncAPIErrorHandler inject ErrorHandler into controller
func WithSyncAPIErrorHandler(h ErrorHandler) SyncAPIOption {
	return func(c *SyncAPIController) {
		c.errorHandler = h
	}
}

// NewSyncAPIController creates a default api controller
func NewSyncAPIController(s SyncAPIServicer, opts ...SyncAPIOption) *SyncAPIController {
	controller := &SyncAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SyncAPIController
func (c *SyncAPIController) Routes() Routes {
	return Routes{
		"GetChanges": Route{
			strings.ToUpper("Get"),
			"/v1/sync/changes",
			c.GetChanges,
		},
	}
}

// GetChanges - get changes for synchronization
func (c *SyncAPIController) GetChanges(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var sinceParam int32
	if query.Has("since") {
		param, err := parseNumericParameter[int32](
			query.Get("since"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "since", Err: err}, nil)
			return
		}

		sinceParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 100
		limitParam = param
	}
	result, err := c.service.GetChanges(r.Context(), sinceParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
