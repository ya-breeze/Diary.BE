// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Diary - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: ilya.korolev@outlook.com
 */

package goserver

import (
	"net/http"
	"strings"
)

// ItemsAPIController binds http requests to an api service and writes the service results to the http response
type ItemsAPIController struct {
	service      ItemsAPIServicer
	errorHandler ErrorHandler
}

// ItemsAPIOption for how the controller is set up.
type ItemsAPIOption func(*ItemsAPIController)

// WithItemsAPIErrorHandler inject ErrorHandler into controller
func WithItemsAPIErrorHandler(h ErrorHandler) ItemsAPIOption {
	return func(c *ItemsAPIController) {
		c.errorHandler = h
	}
}

// NewItemsAPIController creates a default api controller
func NewItemsAPIController(s ItemsAPIServicer, opts ...ItemsAPIOption) *ItemsAPIController {
	controller := &ItemsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemsAPIController
func (c *ItemsAPIController) Routes() Routes {
	return Routes{
		"GetItems": Route{
			strings.ToUpper("Get"),
			"/v1/items",
			c.GetItems,
		},
	}
}

// GetItems - get diary items
func (c *ItemsAPIController) GetItems(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var dateParam string
	if query.Has("date") {
		param := string(query.Get("date"))

		dateParam = param
	} else {
	}
	result, err := c.service.GetItems(r.Context(), dateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
