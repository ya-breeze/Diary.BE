/*
Diary - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ItemsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemsRequest{}

// ItemsRequest struct for ItemsRequest
type ItemsRequest struct {
	Date  string   `json:"date"`
	Title string   `json:"title"`
	Tags  []string `json:"tags,omitempty"`
	Body  string   `json:"body"`
}

type _ItemsRequest ItemsRequest

// NewItemsRequest instantiates a new ItemsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemsRequest(date string, title string, body string) *ItemsRequest {
	this := ItemsRequest{}
	this.Date = date
	this.Title = title
	this.Body = body
	return &this
}

// NewItemsRequestWithDefaults instantiates a new ItemsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemsRequestWithDefaults() *ItemsRequest {
	this := ItemsRequest{}
	return &this
}

// GetDate returns the Date field value
func (o *ItemsRequest) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ItemsRequest) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ItemsRequest) SetDate(v string) {
	o.Date = v
}

// GetTitle returns the Title field value
func (o *ItemsRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ItemsRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ItemsRequest) SetTitle(v string) {
	o.Title = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ItemsRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemsRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ItemsRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ItemsRequest) SetTags(v []string) {
	o.Tags = v
}

// GetBody returns the Body field value
func (o *ItemsRequest) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *ItemsRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *ItemsRequest) SetBody(v string) {
	o.Body = v
}

func (o ItemsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["title"] = o.Title
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["body"] = o.Body
	return toSerialize, nil
}

func (o *ItemsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"title",
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemsRequest := _ItemsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemsRequest)

	if err != nil {
		return err
	}

	*o = ItemsRequest(varItemsRequest)

	return err
}

type NullableItemsRequest struct {
	value *ItemsRequest
	isSet bool
}

func (v NullableItemsRequest) Get() *ItemsRequest {
	return v.value
}

func (v *NullableItemsRequest) Set(val *ItemsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableItemsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableItemsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemsRequest(val *ItemsRequest) *NullableItemsRequest {
	return &NullableItemsRequest{value: val, isSet: true}
}

func (v NullableItemsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
