/*
Diary - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ItemsListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemsListResponse{}

// ItemsListResponse struct for ItemsListResponse
type ItemsListResponse struct {
	// List of diary items matching the search criteria
	Items []ItemsResponse `json:"items"`
	// Total number of items found
	TotalCount int32 `json:"totalCount"`
}

type _ItemsListResponse ItemsListResponse

// NewItemsListResponse instantiates a new ItemsListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemsListResponse(items []ItemsResponse, totalCount int32) *ItemsListResponse {
	this := ItemsListResponse{}
	this.Items = items
	this.TotalCount = totalCount
	return &this
}

// NewItemsListResponseWithDefaults instantiates a new ItemsListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemsListResponseWithDefaults() *ItemsListResponse {
	this := ItemsListResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *ItemsListResponse) GetItems() []ItemsResponse {
	if o == nil {
		var ret []ItemsResponse
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ItemsListResponse) GetItemsOk() ([]ItemsResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *ItemsListResponse) SetItems(v []ItemsResponse) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value
func (o *ItemsListResponse) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ItemsListResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ItemsListResponse) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o ItemsListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemsListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *ItemsListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemsListResponse := _ItemsListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemsListResponse)

	if err != nil {
		return err
	}

	*o = ItemsListResponse(varItemsListResponse)

	return err
}

type NullableItemsListResponse struct {
	value *ItemsListResponse
	isSet bool
}

func (v NullableItemsListResponse) Get() *ItemsListResponse {
	return v.value
}

func (v *NullableItemsListResponse) Set(val *ItemsListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableItemsListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableItemsListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemsListResponse(val *ItemsListResponse) *NullableItemsListResponse {
	return &NullableItemsListResponse{value: val, isSet: true}
}

func (v NullableItemsListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemsListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
