/*
Diary - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SyncChangeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncChangeResponse{}

// SyncChangeResponse struct for SyncChangeResponse
type SyncChangeResponse struct {
	// Unique change ID
	Id int32 `json:"id"`
	// User ID who made the change
	UserId string `json:"userId"`
	// Date of the diary entry that was changed
	Date string `json:"date"`
	// Type of operation performed
	OperationType string `json:"operationType"`
	// When the change occurred
	Timestamp time.Time `json:"timestamp"`
	// Current state of the item (null for deleted items)
	ItemSnapshot NullableItemsResponse `json:"itemSnapshot,omitempty"`
	// Additional metadata about the change
	Metadata []string `json:"metadata,omitempty"`
}

type _SyncChangeResponse SyncChangeResponse

// NewSyncChangeResponse instantiates a new SyncChangeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncChangeResponse(id int32, userId string, date string, operationType string, timestamp time.Time) *SyncChangeResponse {
	this := SyncChangeResponse{}
	this.Id = id
	this.UserId = userId
	this.Date = date
	this.OperationType = operationType
	this.Timestamp = timestamp
	return &this
}

// NewSyncChangeResponseWithDefaults instantiates a new SyncChangeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncChangeResponseWithDefaults() *SyncChangeResponse {
	this := SyncChangeResponse{}
	return &this
}

// GetId returns the Id field value
func (o *SyncChangeResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SyncChangeResponse) SetId(v int32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *SyncChangeResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SyncChangeResponse) SetUserId(v string) {
	o.UserId = v
}

// GetDate returns the Date field value
func (o *SyncChangeResponse) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *SyncChangeResponse) SetDate(v string) {
	o.Date = v
}

// GetOperationType returns the OperationType field value
func (o *SyncChangeResponse) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *SyncChangeResponse) SetOperationType(v string) {
	o.OperationType = v
}

// GetTimestamp returns the Timestamp field value
func (o *SyncChangeResponse) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *SyncChangeResponse) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetItemSnapshot returns the ItemSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyncChangeResponse) GetItemSnapshot() ItemsResponse {
	if o == nil || IsNil(o.ItemSnapshot.Get()) {
		var ret ItemsResponse
		return ret
	}
	return *o.ItemSnapshot.Get()
}

// GetItemSnapshotOk returns a tuple with the ItemSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyncChangeResponse) GetItemSnapshotOk() (*ItemsResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemSnapshot.Get(), o.ItemSnapshot.IsSet()
}

// HasItemSnapshot returns a boolean if a field has been set.
func (o *SyncChangeResponse) HasItemSnapshot() bool {
	if o != nil && o.ItemSnapshot.IsSet() {
		return true
	}

	return false
}

// SetItemSnapshot gets a reference to the given NullableItemsResponse and assigns it to the ItemSnapshot field.
func (o *SyncChangeResponse) SetItemSnapshot(v ItemsResponse) {
	o.ItemSnapshot.Set(&v)
}

// SetItemSnapshotNil sets the value for ItemSnapshot to be an explicit nil
func (o *SyncChangeResponse) SetItemSnapshotNil() {
	o.ItemSnapshot.Set(nil)
}

// UnsetItemSnapshot ensures that no value is present for ItemSnapshot, not even an explicit nil
func (o *SyncChangeResponse) UnsetItemSnapshot() {
	o.ItemSnapshot.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SyncChangeResponse) GetMetadata() []string {
	if o == nil || IsNil(o.Metadata) {
		var ret []string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncChangeResponse) GetMetadataOk() ([]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SyncChangeResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []string and assigns it to the Metadata field.
func (o *SyncChangeResponse) SetMetadata(v []string) {
	o.Metadata = v
}

func (o SyncChangeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncChangeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	toSerialize["date"] = o.Date
	toSerialize["operationType"] = o.OperationType
	toSerialize["timestamp"] = o.Timestamp
	if o.ItemSnapshot.IsSet() {
		toSerialize["itemSnapshot"] = o.ItemSnapshot.Get()
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *SyncChangeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userId",
		"date",
		"operationType",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncChangeResponse := _SyncChangeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyncChangeResponse)

	if err != nil {
		return err
	}

	*o = SyncChangeResponse(varSyncChangeResponse)

	return err
}

type NullableSyncChangeResponse struct {
	value *SyncChangeResponse
	isSet bool
}

func (v NullableSyncChangeResponse) Get() *SyncChangeResponse {
	return v.value
}

func (v *NullableSyncChangeResponse) Set(val *SyncChangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncChangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncChangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncChangeResponse(val *SyncChangeResponse) *NullableSyncChangeResponse {
	return &NullableSyncChangeResponse{value: val, isSet: true}
}

func (v NullableSyncChangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncChangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
