/*
Diary - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SyncResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncResponse{}

// SyncResponse struct for SyncResponse
type SyncResponse struct {
	// List of changes since the requested ID
	Changes []SyncChangeResponse `json:"changes"`
	// Whether there are more changes available
	HasMore bool `json:"hasMore"`
	// ID to use for the next sync request (if hasMore is true)
	NextId *int32 `json:"nextId,omitempty"`
}

type _SyncResponse SyncResponse

// NewSyncResponse instantiates a new SyncResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncResponse(changes []SyncChangeResponse, hasMore bool) *SyncResponse {
	this := SyncResponse{}
	this.Changes = changes
	this.HasMore = hasMore
	return &this
}

// NewSyncResponseWithDefaults instantiates a new SyncResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncResponseWithDefaults() *SyncResponse {
	this := SyncResponse{}
	return &this
}

// GetChanges returns the Changes field value
func (o *SyncResponse) GetChanges() []SyncChangeResponse {
	if o == nil {
		var ret []SyncChangeResponse
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *SyncResponse) GetChangesOk() ([]SyncChangeResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Changes, true
}

// SetChanges sets field value
func (o *SyncResponse) SetChanges(v []SyncChangeResponse) {
	o.Changes = v
}

// GetHasMore returns the HasMore field value
func (o *SyncResponse) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *SyncResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *SyncResponse) SetHasMore(v bool) {
	o.HasMore = v
}

// GetNextId returns the NextId field value if set, zero value otherwise.
func (o *SyncResponse) GetNextId() int32 {
	if o == nil || IsNil(o.NextId) {
		var ret int32
		return ret
	}
	return *o.NextId
}

// GetNextIdOk returns a tuple with the NextId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncResponse) GetNextIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NextId) {
		return nil, false
	}
	return o.NextId, true
}

// HasNextId returns a boolean if a field has been set.
func (o *SyncResponse) HasNextId() bool {
	if o != nil && !IsNil(o.NextId) {
		return true
	}

	return false
}

// SetNextId gets a reference to the given int32 and assigns it to the NextId field.
func (o *SyncResponse) SetNextId(v int32) {
	o.NextId = &v
}

func (o SyncResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["changes"] = o.Changes
	toSerialize["hasMore"] = o.HasMore
	if !IsNil(o.NextId) {
		toSerialize["nextId"] = o.NextId
	}
	return toSerialize, nil
}

func (o *SyncResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"changes",
		"hasMore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncResponse := _SyncResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyncResponse)

	if err != nil {
		return err
	}

	*o = SyncResponse(varSyncResponse)

	return err
}

type NullableSyncResponse struct {
	value *SyncResponse
	isSet bool
}

func (v NullableSyncResponse) Get() *SyncResponse {
	return v.value
}

func (v *NullableSyncResponse) Set(val *SyncResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncResponse(val *SyncResponse) *NullableSyncResponse {
	return &NullableSyncResponse{value: val, isSet: true}
}

func (v NullableSyncResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
