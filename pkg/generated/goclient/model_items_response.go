/*
Diary - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ilya.korolev@outlook.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ItemsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemsResponse{}

// ItemsResponse struct for ItemsResponse
type ItemsResponse struct {
	Date         string         `json:"date"`
	Title        string         `json:"title"`
	Tags         []string       `json:"tags,omitempty"`
	Body         string         `json:"body"`
	PreviousDate NullableString `json:"previousDate,omitempty"`
	NextDate     NullableString `json:"nextDate,omitempty"`
}

type _ItemsResponse ItemsResponse

// NewItemsResponse instantiates a new ItemsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemsResponse(date string, title string, body string) *ItemsResponse {
	this := ItemsResponse{}
	this.Date = date
	this.Title = title
	this.Body = body
	return &this
}

// NewItemsResponseWithDefaults instantiates a new ItemsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemsResponseWithDefaults() *ItemsResponse {
	this := ItemsResponse{}
	return &this
}

// GetDate returns the Date field value
func (o *ItemsResponse) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ItemsResponse) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ItemsResponse) SetDate(v string) {
	o.Date = v
}

// GetTitle returns the Title field value
func (o *ItemsResponse) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ItemsResponse) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ItemsResponse) SetTitle(v string) {
	o.Title = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ItemsResponse) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemsResponse) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ItemsResponse) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ItemsResponse) SetTags(v []string) {
	o.Tags = v
}

// GetBody returns the Body field value
func (o *ItemsResponse) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *ItemsResponse) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *ItemsResponse) SetBody(v string) {
	o.Body = v
}

// GetPreviousDate returns the PreviousDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemsResponse) GetPreviousDate() string {
	if o == nil || IsNil(o.PreviousDate.Get()) {
		var ret string
		return ret
	}
	return *o.PreviousDate.Get()
}

// GetPreviousDateOk returns a tuple with the PreviousDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemsResponse) GetPreviousDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousDate.Get(), o.PreviousDate.IsSet()
}

// HasPreviousDate returns a boolean if a field has been set.
func (o *ItemsResponse) HasPreviousDate() bool {
	if o != nil && o.PreviousDate.IsSet() {
		return true
	}

	return false
}

// SetPreviousDate gets a reference to the given NullableString and assigns it to the PreviousDate field.
func (o *ItemsResponse) SetPreviousDate(v string) {
	o.PreviousDate.Set(&v)
}

// SetPreviousDateNil sets the value for PreviousDate to be an explicit nil
func (o *ItemsResponse) SetPreviousDateNil() {
	o.PreviousDate.Set(nil)
}

// UnsetPreviousDate ensures that no value is present for PreviousDate, not even an explicit nil
func (o *ItemsResponse) UnsetPreviousDate() {
	o.PreviousDate.Unset()
}

// GetNextDate returns the NextDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemsResponse) GetNextDate() string {
	if o == nil || IsNil(o.NextDate.Get()) {
		var ret string
		return ret
	}
	return *o.NextDate.Get()
}

// GetNextDateOk returns a tuple with the NextDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemsResponse) GetNextDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextDate.Get(), o.NextDate.IsSet()
}

// HasNextDate returns a boolean if a field has been set.
func (o *ItemsResponse) HasNextDate() bool {
	if o != nil && o.NextDate.IsSet() {
		return true
	}

	return false
}

// SetNextDate gets a reference to the given NullableString and assigns it to the NextDate field.
func (o *ItemsResponse) SetNextDate(v string) {
	o.NextDate.Set(&v)
}

// SetNextDateNil sets the value for NextDate to be an explicit nil
func (o *ItemsResponse) SetNextDateNil() {
	o.NextDate.Set(nil)
}

// UnsetNextDate ensures that no value is present for NextDate, not even an explicit nil
func (o *ItemsResponse) UnsetNextDate() {
	o.NextDate.Unset()
}

func (o ItemsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["title"] = o.Title
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["body"] = o.Body
	if o.PreviousDate.IsSet() {
		toSerialize["previousDate"] = o.PreviousDate.Get()
	}
	if o.NextDate.IsSet() {
		toSerialize["nextDate"] = o.NextDate.Get()
	}
	return toSerialize, nil
}

func (o *ItemsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"title",
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemsResponse := _ItemsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemsResponse)

	if err != nil {
		return err
	}

	*o = ItemsResponse(varItemsResponse)

	return err
}

type NullableItemsResponse struct {
	value *ItemsResponse
	isSet bool
}

func (v NullableItemsResponse) Get() *ItemsResponse {
	return v.value
}

func (v *NullableItemsResponse) Set(val *ItemsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableItemsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableItemsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemsResponse(val *ItemsResponse) *NullableItemsResponse {
	return &NullableItemsResponse{value: val, isSet: true}
}

func (v NullableItemsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
