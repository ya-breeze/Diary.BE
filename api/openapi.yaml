openapi: 3.0.3
info:
  title: Diary - OpenAPI 3.0
  contact:
    email: ilya.korolev@outlook.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1

paths:
  /v1/authorize:
    post:
      tags:
        - auth
      summary: validate user/password and return token
      security: [] # Override to indicate no security required
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthData"
        required: true
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "JWT token"
                required:
                  - token
        "401":
          description: Authentication failed

  /v1/user:
    get:
      tags:
        - user
      summary: return user object
      operationId: getUser
      responses:
        "200":
          description: user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /v1/assets:
    get:
      tags:
        - assets
      summary: return asset by path
      operationId: getAsset
      parameters:
        - name: path
          in: query
          description: relative path to asset file
          required: true
          schema:
            type: string
          example: "images/photos/vacation.jpg"
      responses:
        "200":
          description: return asset
          content:
            "*/*":
              schema:
                type: string
                format: binary
        "404":
          description: Asset not found
    post:
      tags:
        - assets
      summary: upload an asset file
      operationId: uploadAsset
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                asset:
                  type: string
                  format: binary
                  description: The asset file to upload
              required:
                - asset
        required: true
      responses:
        "200":
          description: asset uploaded successfully
          content:
            text/plain:
              schema:
                type: string
                description: The filename of the uploaded asset
                example: "123e4567-e89b-12d3-a456-426614174000.jpg"
        "400":
          description: Bad request - invalid file or missing asset field
        "401":
          description: Unauthorized - authentication required
        "413":
          description: Payload too large - file size exceeds 10MB limit
        "500":
          description: Internal server error - failed to save file

  /v1/items:
    get:
      tags:
        - items
      summary: get diary items
      operationId: getItems
      parameters:
        - name: date
          in: query
          description: filter items by date (optional)
          required: false
          schema:
            type: string
            format: date
          example: "2024-01-15"
        - name: search
          in: query
          description: search text to filter items by title and body content
          required: false
          schema:
            type: string
          example: "vacation"
        - name: tags
          in: query
          description: comma-separated list of tags to filter items
          required: false
          schema:
            type: string
          example: "personal,work"
      responses:
        "200":
          description: diary items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsListResponse"
        "400":
          description: Invalid parameters
        "404":
          description: No items found
    put:
      tags:
        - items
      summary: upsert diary item
      operationId: putItems
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsRequest"
        required: true
      responses:
        "200":
          description: item saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsResponse"
        "400":
          description: Invalid request data
        "401":
          description: Unauthorized

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthData:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      required:
        - email
        - password

    Entity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - id

    User:
      type: object
      properties:
        email:
          type: string
        startDate:
          type: string
          format: date-time
      required:
        - email
        - startDate
      allOf:
        - $ref: "#/components/schemas/Entity"

    ItemsRequest:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-01-15"
        title:
          type: string
          example: "My diary entry"
        tags:
          type: array
          items:
            type: string
          example: ["personal", "work", "travel"]
        body:
          type: string
          example: "Today was a great day..."
      required:
        - date
        - title
        - body

    ItemsResponse:
      type: object
      properties:
        date:
          type: string
          format: date
          example: "2024-01-15"
        title:
          type: string
          example: "My diary entry"
        tags:
          type: array
          items:
            type: string
          example: ["personal", "work", "travel"]
        body:
          type: string
          example: "Today was a great day..."
        previousDate:
          type: string
          format: date
          nullable: true
          example: "2024-01-14"
        nextDate:
          type: string
          format: date
          nullable: true
          example: "2024-01-16"
      required:
        - date
        - title
        - body

    ItemsListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemsResponse"
          description: "List of diary items matching the search criteria"
        totalCount:
          type: integer
          description: "Total number of items found"
          example: 42
      required:
        - items
        - totalCount
