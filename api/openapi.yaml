openapi: 3.0.3
info:
  title: Diary - OpenAPI 3.0
  contact:
    email: ilya.korolev@outlook.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1

paths:
  /v1/authorize:
    post:
      tags:
        - auth
      summary: validate user/password and return token
      security: [] # Override to indicate no security required
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthData"
        required: true
      responses:
        "200":
          description: return token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "JWT token"
                required:
                  - token
        "401":
          description: Authentication failed

  /v1/user:
    get:
      tags:
        - user
      summary: return user object
      operationId: getUser
      responses:
        "200":
          description: user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /v1/assets/{path}:
    get:
      tags:
        - assets
      summary: return asset by path
      operationId: getAsset
      parameters:
        - name: path
          in: path
          description: path to asset
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: return asset
          content:
            "*/*":
              schema:
                type: string
                format: binary
        "404":
          description: Asset not found

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthData:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      required:
        - email
        - password

    Entity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - id

    User:
      type: object
      properties:
        email:
          type: string
        startDate:
          type: string
          format: date-time
      required:
        - email
        - startDate
      allOf:
        - $ref: "#/components/schemas/Entity"
